{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.date.to-iso-string.js","webpack:///./node_modules/core-js/modules/es.date.to-string.js","webpack:///./node_modules/core-js/modules/es.parse-int.js","webpack:///./node_modules/core-js/internals/string-repeat.js","webpack:///./node_modules/core-js/internals/date-to-iso-string.js","webpack:///./node_modules/core-js/internals/string-pad.js","webpack:///./node_modules/core-js/internals/parse-int.js"],"names":["$","__webpack_require__","toISOString","target","proto","forced","Date","prototype","redefine","DatePrototype","nativeDateToString","getTime","NaN","value","call","this","parseIntImplementation","global","parseInt","toInteger","requireObjectCoercible","module","exports","repeat","count","str","String","result","n","Infinity","RangeError","fails","padStart","start","abs","Math","nativeDateToISOString","isFinite","year","getUTCFullYear","milliseconds","getUTCMilliseconds","sign","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toLength","ceil","createMethod","IS_END","$this","maxLength","fillString","fillLen","stringFiller","S","stringLength","length","fillStr","undefined","intMaxLength","slice","end","trim","whitespaces","nativeParseInt","hex","FORCED","string","radix","test"],"mappings":";;;;;;;;;6EAAA,IAAAA,EAAQC,EAAQ,IAChBC,EAAkBD,EAAQ,KAK1BD,EAAA,CAAGG,OAAA,OAAAC,OAAA,EAAAC,OAAAC,KAAAC,UAAAL,iBAAkF,CACrFA,qCCPA,IAAAM,EAAeP,EAAQ,IAEvBQ,EAAAH,KAAAC,UAGAG,EAAAD,EAAA,SACAE,EAAAF,EAAAE,QAIA,IAAAL,KAAAM,KAAA,IAPA,gBAQAJ,EAAAC,EAPA,WAOA,WACA,IAAAI,EAAAF,EAAAG,KAAAC,MAEA,OAAAF,KAAAH,EAAAI,KAAAC,MAXA,sCCHA,IAAAf,EAAQC,EAAQ,IAChBe,EAA6Bf,EAAQ,KAIrCD,EAAA,CAAGiB,QAAA,EAAAZ,OAAAa,UAAAF,GAA2D,CAC9DE,SAAAF,sCCLA,IAAAG,EAAgBlB,EAAQ,IACxBmB,EAA6BnB,EAAQ,IAIrCoB,EAAAC,QAAA,GAAAC,QAAA,SAAAC,GACA,IAAAC,EAAAC,OAAAN,EAAAL,OACAY,EAAA,GACAC,EAAAT,EAAAK,GACA,GAAAI,EAAA,GAAAA,GAAAC,IAAA,MAAAC,WAAA,+BACA,KAAQF,EAAA,GAAMA,KAAA,KAAAH,MAAA,EAAAG,IAAAD,GAAAF,GACd,OAAAE,qCCXA,IAAAI,EAAY9B,EAAQ,GACpB+B,EAAe/B,EAAQ,KAAyBgC,MAEhDC,EAAAC,KAAAD,IACAzB,EAAAH,KAAAC,UACAI,EAAAF,EAAAE,QACAyB,EAAA3B,EAAAP,YAKAmB,EAAAC,QAAAS,EAAA,WACA,kCAAAK,EAAAtB,KAAA,IAAAR,MAAA,aACCyB,EAAA,WACDK,EAAAtB,KAAA,IAAAR,KAAAM,QACC,WACD,IAAAyB,SAAA1B,EAAAG,KAAAC,OAAA,MAAAe,WAAA,sBACA,IACAQ,EADAvB,KACAwB,iBACAC,EAFAzB,KAEA0B,qBACAC,EAAAJ,EAAA,MAAAA,EAAA,YACA,OAAAI,EAAAV,EAAAE,EAAAI,GAAAI,EAAA,OACA,IAAAV,EALAjB,KAKA4B,cAAA,OACA,IAAAX,EANAjB,KAMA6B,aAAA,KACA,IAAAZ,EAPAjB,KAOA8B,cAAA,KACA,IAAAb,EARAjB,KAQA+B,gBAAA,KACA,IAAAd,EATAjB,KASAgC,gBAAA,KACA,IAAAf,EAAAQ,EAAA,KACA,KACCJ,uBC7BD,IAAAY,EAAe/C,EAAQ,IACvBsB,EAAatB,EAAQ,KACrBmB,EAA6BnB,EAAQ,IAErCgD,EAAAd,KAAAc,KAGAC,EAAA,SAAAC,GACA,gBAAAC,EAAAC,EAAAC,GACA,IAIAC,EAAAC,EAJAC,EAAA/B,OAAAN,EAAAgC,IACAM,EAAAD,EAAAE,OACAC,OAAAC,IAAAP,EAAA,IAAA5B,OAAA4B,GACAQ,EAAAd,EAAAK,GAEA,OAAAS,GAAAJ,GAAA,IAAAE,EAAAH,GACAF,EAAAO,EAAAJ,GACAF,EAAAjC,EAAAT,KAAA8C,EAAAX,EAAAM,EAAAK,EAAAD,UACAA,OAAAJ,IAAAC,IAAAO,MAAA,EAAAR,IACAJ,EAAAM,EAAAD,IAAAC,KAIApC,EAAAC,QAAA,CAGAW,MAAAiB,GAAA,GAGAc,IAAAd,GAAA,yBC7BA,IAAAjC,EAAahB,EAAQ,GACrBgE,EAAWhE,EAAQ,IAA0BgE,KAC7CC,EAAkBjE,EAAQ,IAE1BkE,EAAAlD,EAAAC,SACAkD,EAAA,cACAC,EAAA,IAAAF,EAAAD,EAAA,YAAAC,EAAAD,EAAA,QAIA7C,EAAAC,QAAA+C,EAAA,SAAAC,EAAAC,GACA,IAAAd,EAAAQ,EAAAvC,OAAA4C,IACA,OAAAH,EAAAV,EAAAc,IAAA,IAAAH,EAAAI,KAAAf,GAAA,SACCU","file":"js/amplitudeplayer-legacy.8b284fb41bf3dd6191fb.js","sourcesContent":["var $ = require('../internals/export');\nvar toISOString = require('../internals/date-to-iso-string');\n\n// `Date.prototype.toISOString` method\n// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring\n// PhantomJS / old WebKit has a broken implementations\n$({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString }, {\n  toISOString: toISOString\n});\n","var redefine = require('../internals/redefine');\n\nvar DatePrototype = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar nativeDateToString = DatePrototype[TO_STRING];\nvar getTime = DatePrototype.getTime;\n\n// `Date.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-date.prototype.tostring\nif (new Date(NaN) + '' != INVALID_DATE) {\n  redefine(DatePrototype, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? nativeDateToString.call(this) : INVALID_DATE;\n  });\n}\n","var $ = require('../internals/export');\nvar parseIntImplementation = require('../internals/parse-int');\n\n// `parseInt` method\n// https://tc39.github.io/ecma262/#sec-parseint-string-radix\n$({ global: true, forced: parseInt != parseIntImplementation }, {\n  parseInt: parseIntImplementation\n});\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar padStart = require('../internals/string-pad').start;\n\nvar abs = Math.abs;\nvar DatePrototype = Date.prototype;\nvar getTime = DatePrototype.getTime;\nvar nativeDateToISOString = DatePrototype.toISOString;\n\n// `Date.prototype.toISOString` method implementation\n// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring\n// PhantomJS / old WebKit fails here:\nmodule.exports = (fails(function () {\n  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  nativeDateToISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var date = this;\n  var year = date.getUTCFullYear();\n  var milliseconds = date.getUTCMilliseconds();\n  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';\n  return sign + padStart(abs(year), sign ? 6 : 4, 0) +\n    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +\n    '-' + padStart(date.getUTCDate(), 2, 0) +\n    'T' + padStart(date.getUTCHours(), 2, 0) +\n    ':' + padStart(date.getUTCMinutes(), 2, 0) +\n    ':' + padStart(date.getUTCSeconds(), 2, 0) +\n    '.' + padStart(milliseconds, 3, 0) +\n    'Z';\n} : nativeDateToISOString;\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('../internals/to-length');\nvar repeat = require('../internals/string-repeat');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar ceil = Math.ceil;\n\n// `String.prototype.{ padStart, padEnd }` methods implementation\nvar createMethod = function (IS_END) {\n  return function ($this, maxLength, fillString) {\n    var S = String(requireObjectCoercible($this));\n    var stringLength = S.length;\n    var fillStr = fillString === undefined ? ' ' : String(fillString);\n    var intMaxLength = toLength(maxLength);\n    var fillLen, stringFiller;\n    if (intMaxLength <= stringLength || fillStr == '') return S;\n    fillLen = intMaxLength - stringLength;\n    stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));\n    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n    return IS_END ? S + stringFiller : stringFiller + S;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.padStart` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart\n  start: createMethod(false),\n  // `String.prototype.padEnd` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.padend\n  end: createMethod(true)\n};\n","var global = require('../internals/global');\nvar trim = require('../internals/string-trim').trim;\nvar whitespaces = require('../internals/whitespaces');\n\nvar nativeParseInt = global.parseInt;\nvar hex = /^[+-]?0[Xx]/;\nvar FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;\n\n// `parseInt` method\n// https://tc39.github.io/ecma262/#sec-parseint-string-radix\nmodule.exports = FORCED ? function parseInt(string, radix) {\n  var S = trim(String(string));\n  return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));\n} : nativeParseInt;\n"],"sourceRoot":""}