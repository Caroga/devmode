{"version":3,"sources":["webpack:///./node_modules/core-js/internals/regexp-exec.js","webpack:///./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","webpack:///./node_modules/core-js/internals/advance-string-index.js","webpack:///./node_modules/core-js/internals/regexp-exec-abstract.js","webpack:///./node_modules/core-js/internals/regexp-flags.js","webpack:///./node_modules/core-js/internals/string-multibyte.js","webpack:///./node_modules/core-js/modules/es.regexp.exec.js","webpack:///./node_modules/core-js/modules/es.string.replace.js"],"names":["re1","re2","regexpFlags","__webpack_require__","nativeExec","RegExp","prototype","exec","nativeReplace","String","replace","patchedExec","UPDATES_LAST_INDEX_WRONG","call","lastIndex","NPCG_INCLUDED","undefined","str","reCopy","match","i","re","this","source","global","index","length","arguments","module","exports","hide","redefine","fails","wellKnownSymbol","regexpExec","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","result","groups","a","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","apply","split","KEY","sham","SYMBOL","DELEGATES_TO_SYMBOL","O","DELEGATES_TO_EXEC","execCalled","constructor","nativeRegExpMethod","methods","nativeMethod","regexp","arg2","forceStringMethod","done","value","stringMethod","regexMethod","string","arg","charAt","S","unicode","classof","R","TypeError","anObject","that","ignoreCase","multiline","dotAll","sticky","toInteger","requireObjectCoercible","createMethod","CONVERT_TO_STRING","$this","pos","first","second","position","size","charCodeAt","slice","codeAt","$","target","proto","forced","fixRegExpWellKnownSymbolLogic","toObject","toLength","advanceStringIndex","regExpExec","max","Math","min","floor","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","REPLACE","maybeCallNative","searchValue","replaceValue","replacer","res","rx","functionalReplace","fullUnicode","results","push","it","accumulatedResult","nextSourcePosition","matched","captures","j","namedCaptures","replacerArgs","concat","replacement","getSubstitution","tailPos","m","symbols","ch","capture","n","f"],"mappings":"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","file":"js/vuetablepaginationinfo-legacy.96fbe64f512e963c9218.js","sourcesContent":["'use strict';\nvar regexpFlags = require('./regexp-flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","'use strict';\nvar hide = require('../internals/hide');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n    if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);\n  }\n};\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","var classof = require('./classof-raw');\nvar regexpExec = require('./regexp-exec');\n\n// `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n\n  if (classof(R) !== 'RegExp') {\n    throw TypeError('RegExp#exec called on incompatible receiver');\n  }\n\n  return regexpExec.call(R, S);\n};\n\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar exec = require('../internals/regexp-exec');\n\n$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {\n  exec: exec\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined\n        ? replacer.call(searchValue, O, replaceValue)\n        : nativeReplace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        results.push(result);\n        if (!global) break;\n\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n  // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return nativeReplace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n"],"sourceRoot":""}