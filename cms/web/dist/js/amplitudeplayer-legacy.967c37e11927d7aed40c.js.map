{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.date.to-iso-string.js","webpack:///./node_modules/core-js/modules/es.date.to-string.js","webpack:///./node_modules/core-js/modules/es.parse-int.js","webpack:///./node_modules/core-js/internals/string-repeat.js","webpack:///./node_modules/core-js/internals/date-to-iso-string.js","webpack:///./node_modules/core-js/internals/string-pad.js","webpack:///./node_modules/core-js/internals/parse-int.js"],"names":["$","toISOString","target","proto","forced","Date","prototype","redefine","DatePrototype","nativeDateToString","getTime","NaN","value","call","this","parseIntImplementation","global","parseInt","toInteger","requireObjectCoercible","module","exports","repeat","count","str","String","result","n","Infinity","RangeError","fails","padStart","start","abs","Math","nativeDateToISOString","isFinite","year","getUTCFullYear","milliseconds","getUTCMilliseconds","sign","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toLength","ceil","createMethod","IS_END","$this","maxLength","fillString","fillLen","stringFiller","S","stringLength","length","fillStr","undefined","intMaxLength","slice","end","trim","whitespaces","nativeParseInt","hex","FORCED","string","radix","test"],"mappings":"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","file":"js/amplitudeplayer-legacy.967c37e11927d7aed40c.js","sourcesContent":["var $ = require('../internals/export');\nvar toISOString = require('../internals/date-to-iso-string');\n\n// `Date.prototype.toISOString` method\n// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring\n// PhantomJS / old WebKit has a broken implementations\n$({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString }, {\n  toISOString: toISOString\n});\n","var redefine = require('../internals/redefine');\n\nvar DatePrototype = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar nativeDateToString = DatePrototype[TO_STRING];\nvar getTime = DatePrototype.getTime;\n\n// `Date.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-date.prototype.tostring\nif (new Date(NaN) + '' != INVALID_DATE) {\n  redefine(DatePrototype, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? nativeDateToString.call(this) : INVALID_DATE;\n  });\n}\n","var $ = require('../internals/export');\nvar parseIntImplementation = require('../internals/parse-int');\n\n// `parseInt` method\n// https://tc39.github.io/ecma262/#sec-parseint-string-radix\n$({ global: true, forced: parseInt != parseIntImplementation }, {\n  parseInt: parseIntImplementation\n});\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar padStart = require('../internals/string-pad').start;\n\nvar abs = Math.abs;\nvar DatePrototype = Date.prototype;\nvar getTime = DatePrototype.getTime;\nvar nativeDateToISOString = DatePrototype.toISOString;\n\n// `Date.prototype.toISOString` method implementation\n// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring\n// PhantomJS / old WebKit fails here:\nmodule.exports = (fails(function () {\n  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  nativeDateToISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var date = this;\n  var year = date.getUTCFullYear();\n  var milliseconds = date.getUTCMilliseconds();\n  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';\n  return sign + padStart(abs(year), sign ? 6 : 4, 0) +\n    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +\n    '-' + padStart(date.getUTCDate(), 2, 0) +\n    'T' + padStart(date.getUTCHours(), 2, 0) +\n    ':' + padStart(date.getUTCMinutes(), 2, 0) +\n    ':' + padStart(date.getUTCSeconds(), 2, 0) +\n    '.' + padStart(milliseconds, 3, 0) +\n    'Z';\n} : nativeDateToISOString;\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('../internals/to-length');\nvar repeat = require('../internals/string-repeat');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar ceil = Math.ceil;\n\n// `String.prototype.{ padStart, padEnd }` methods implementation\nvar createMethod = function (IS_END) {\n  return function ($this, maxLength, fillString) {\n    var S = String(requireObjectCoercible($this));\n    var stringLength = S.length;\n    var fillStr = fillString === undefined ? ' ' : String(fillString);\n    var intMaxLength = toLength(maxLength);\n    var fillLen, stringFiller;\n    if (intMaxLength <= stringLength || fillStr == '') return S;\n    fillLen = intMaxLength - stringLength;\n    stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));\n    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n    return IS_END ? S + stringFiller : stringFiller + S;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.padStart` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart\n  start: createMethod(false),\n  // `String.prototype.padEnd` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.padend\n  end: createMethod(true)\n};\n","var global = require('../internals/global');\nvar trim = require('../internals/string-trim').trim;\nvar whitespaces = require('../internals/whitespaces');\n\nvar nativeParseInt = global.parseInt;\nvar hex = /^[+-]?0[Xx]/;\nvar FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;\n\n// `parseInt` method\n// https://tc39.github.io/ecma262/#sec-parseint-string-radix\nmodule.exports = FORCED ? function parseInt(string, radix) {\n  var S = trim(String(string));\n  return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));\n} : nativeParseInt;\n"],"sourceRoot":""}